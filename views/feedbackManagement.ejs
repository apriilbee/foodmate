<div class="container" style="margin-top: 40px; position: relative">
    <h2 style="color: #fe8641; font-weight: bold; text-align: center">Your Feedbacks</h2>
    <button class="close-btn" onclick="closeFeedbackManagement()">‚úñ</button>
    <div id="feedbackList" class="feedback-list"></div>
</div>

<!-- CSS -->
<style>
    .container {
        max-width: 700px;
        margin: auto;
        padding: 25px;
        background: #fff3e0;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }
    h2 {
        font-family: "Nunito", sans-serif;
        margin-bottom: 10px;
    }
    .close-btn {
        position: absolute;
        top: 15px;
        right: 20px;
        font-size: 22px;
        font-weight: bold;
        color: #fe8641;
        background: none;
        border: none;
        cursor: pointer;
    }
    .close-btn:hover {
        color: #000;
    }

    .feedback-list {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .feedback-item {
        background-color: #fe8641;
        color: #fff;
        padding: 15px 20px;
        border-radius: 12px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-family: "Nunito", sans-serif;
    }

    .feedback-item .stars {
        font-size: 18px;
        display: flex;
        align-items: center;
        margin-bottom: 6px;
    }

    .feedback-item .message {
        font-size: 14px;
        flex: 1;
        margin-left: 12px;
        word-wrap: break-word;
        color: #fff;
    }

    .feedback-item .actions {
        display: flex;
        gap: 10px;
    }

    .feedback-item .edit-btn,
    .feedback-item .delete-btn,
    .feedback-item .restore-btn,
    .edit-btn,
    .delete-btn {
        font-size: 14px;
        padding: 6px 12px;
        background-color: white;
        color: #fe8641;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.2s;
    }

    .feedback-item .edit-btn:hover {
        color: #ffcc00;
    }

    .feedback-item .delete-btn:hover {
        color: #ff4444;
    }

    .feedback-item .restore-btn:hover {
        background-color: #c8e6c9;
        color: green;
    }

    .toast-message {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background-color: #fe8641;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: bold;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        animation: fadeInOut 3s;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    .modal-content {
        background-color: #fe8641;
        padding: 20px;
        border-radius: 12px;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        position: relative;
        color: #fff;
    }

    .modal-content .close-btn {
        position: absolute;
        top: 8px;
        right: 12px;
        font-size: 20px;
        font-weight: bold;
        color: #fff;
        cursor: pointer;
    }

    .modal-stars .star {
        font-size: 24px;
        cursor: pointer;
        color: #fff;
        padding: 6px 8px;
        border-radius: 50%;
        margin-right: 5px;
    }

    @keyframes fadeInOut {
        0% {
            opacity: 0;
        }
        10% {
            opacity: 1;
        }
        90% {
            opacity: 1;
        }
        100% {
            opacity: 0;
        }
    }
</style>

<!-- JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const feedbackList = document.getElementById("feedbackList");

        try {
            const res = await fetch("/api/feedback?all=true");
            const data = await res.json();

            if (data.success && data.data.length > 0) {
                feedbackList.innerHTML = "";
                data.data.forEach((feedback) => {
                    const listItem = document.createElement("div");
                    listItem.className = "feedback-item";
                    listItem.innerHTML = `
          <div>
            <div class="stars">${"‚òÖ".repeat(feedback.rating)}${"‚òÜ".repeat(5 - feedback.rating)}</div>
            <div class="message">
              ${feedback.message ? feedback.message : "<span class='no-comment'>No comment provided.</span>"}
              ${feedback.isDeleted ? "<span style='color:red; font-size: 12px;'> (deleted)</span>" : ""}
            </div>
          </div>
          <div class="actions">
            ${
                feedback.isDeleted
                    ? `<button class="restore-btn" onclick="restoreFeedback('${feedback._id}')">‚ôªÔ∏è Restore</button>`
                    : `
                  <button class="edit-btn" onclick="editFeedback('${feedback._id}', ${feedback.rating}, \`${
                          feedback.message || ""
                      }\`)">‚úèÔ∏è Edit</button>
                  <button class="delete-btn" onclick="deleteFeedback('${feedback._id}')">üóëÔ∏è Delete</button>
                `
            }
          </div>
        `;
                    feedbackList.appendChild(listItem);
                });
            } else {
                feedbackList.innerHTML = '<div class="no-feedback">No feedback found.</div>';
            }
        } catch (err) {
            feedbackList.innerHTML = '<div class="no-feedback">Error loading feedback. Please try again.</div>';
        }
    });

    function closeFeedbackManagement() {
        window.location.href = "/home";
    }

    function showToast(message) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.className = "toast-message";
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }

    async function deleteFeedback(id) {
        if (confirm("Are you sure you want to delete this feedback?")) {
            try {
                const res = await fetch(`/api/feedback/${id}`, {
                    method: "DELETE",
                    credentials: "include",
                });
                const data = await res.json();
                if (data.success) {
                    showToast("Feedback deleted successfully!");
                    location.reload();
                } else {
                    showToast("Failed to delete feedback.");
                }
            } catch (err) {
                showToast("Error deleting feedback.");
            }
        }
    }

    async function restoreFeedback(id) {
        try {
            const res = await fetch(`/api/feedback/restore/${id}`, {
                method: "PUT",
                credentials: "include",
            });
            const data = await res.json();
            if (data.success) {
                showToast("Feedback restored!");
                location.reload();
            } else {
                showToast("Failed to restore feedback.");
            }
        } catch (err) {
            showToast("Error restoring feedback.");
        }
    }

    let currentEditId = null;
    const ratingMap = {};

    function editFeedback(id, rating, message) {
        currentEditId = id;
        ratingMap[id] = rating;

        document.getElementById("modalMessage").value = message || "";
        document.getElementById("modalStars").innerHTML = "";

        for (let i = 1; i <= 5; i++) {
            const star = document.createElement("span");
            star.textContent = "‚òÖ";
            star.className = "star";
            star.style.color = i <= rating ? "#fff" : "#ccc";
            star.setAttribute("data-value", i);
            star.onclick = () => setModalRating(id, i);
            document.getElementById("modalStars").appendChild(star);
        }

        document.getElementById("editModal").style.display = "flex";
    }

    function setModalRating(id, value) {
        ratingMap[id] = value;
        const stars = document.querySelectorAll("#modalStars .star");
        stars.forEach((star) => {
            const val = parseInt(star.getAttribute("data-value"));
            star.style.color = val <= value ? "#fff" : "#ccc";
        });
    }

    function closeEditModal() {
        document.getElementById("editModal").style.display = "none";
        currentEditId = null;
    }

    async function submitEdit() {
        const message = document.getElementById("modalMessage").value;
        const rating = ratingMap[currentEditId];

        try {
            const res = await fetch(`/api/feedback/${currentEditId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ rating, message }),
            });

            const data = await res.json();
            if (data.success) {
                showToast("Feedback updated!");
                closeEditModal();
                location.reload();
            } else {
                showToast("Failed to update feedback.");
            }
        } catch (err) {
            showToast("Error updating feedback.");
        }
    }
</script>

<div id="editModal" class="modal" style="display: none">
    <div class="modal-content">
        <span class="close-btn" onclick="closeEditModal()">&times;</span>
        <h5 style="color: #fff">Edit Your Feedback</h5>
        <div class="modal-stars" id="modalStars"></div>
        <textarea
            id="modalMessage"
            rows="3"
            style="width: 100%; margin-top: 10px"
            placeholder="Edit your message..."
        ></textarea>
        <div style="margin-top: 10px; text-align: right">
            <button onclick="submitEdit()" class="edit-btn">Save</button>
            <button onclick="closeEditModal()" class="delete-btn">Cancel</button>
        </div>
    </div>
</div>
