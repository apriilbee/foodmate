<div class="container" style="margin-top: 40px; position: relative;">
  <h2 style="color: #fe8641; font-weight: bold; text-align: center;">Your Feedbacks</h2>
  <button class="close-btn" onclick="closeFeedbackManagement()">‚úñ</button>
  <div id="feedbackList" class="feedback-list"></div>
</div>

<!-- CSS -->
<style>
.container {
  max-width: 600px;
  margin: auto;
  padding: 15px;
  background: #fff3e0;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  position: relative;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 20px;
  cursor: pointer;
}

.close-btn:hover {
  color: #000;
}

.feedback-list {
  margin-top: 20px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.feedback-item {
  background-color: #fe8641;
  color: #fff;
  padding: 12px 15px;
  border-radius: 8px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.feedback-item .stars {
  font-size: 18px;
  display: flex;
  align-items: center;
}

.feedback-item .message {
  font-size: 14px;
  flex: 1;
  margin-left: 12px;
  word-wrap: break-word;
  color: #fff;
}

.feedback-item .actions {
  display: flex;
  gap: 10px;
}

.feedback-item .edit-btn,
.feedback-item .delete-btn {
  background: none;
  border: none;
  color: #fff;
  cursor: pointer;
  font-weight: bold;
  font-size: 14px;
  transition: color 0.3s;
}

.feedback-item .edit-btn:hover {
  color: #ffcc00;
}

.feedback-item .delete-btn:hover {
  color: #ff4444;
}

.toast-message {
  position: fixed;
  bottom: 20px;
  left: 20px;
  background-color: #fe8641;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  font-weight: bold;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  animation: fadeInOut 3s;
}

@keyframes fadeInOut {
  0% { opacity: 0; }
  10% { opacity: 1; }
  90% { opacity: 1; }
  100% { opacity: 0; }
}
</style>

<!-- JavaScript -->
<script>
document.addEventListener("DOMContentLoaded", async () => {
  const feedbackList = document.getElementById("feedbackList");

  try {
    const res = await fetch("/api/feedback?all=true");
    const data = await res.json();

    if (data.success && data.data.length > 0) {
      feedbackList.innerHTML = "";
      data.data.forEach(feedback => {
        const listItem = document.createElement("div");
listItem.className = "feedback-item";
listItem.innerHTML = `
  <div>
    <div class="stars">${"‚òÖ".repeat(feedback.rating)}${"‚òÜ".repeat(5 - feedback.rating)}</div>
    <div class="message">
      ${feedback.message ? feedback.message : "<span class='no-comment'>No comment provided.</span>"}
      ${feedback.isDeleted ? "<span style='color:red; font-size: 12px;'> (deleted)</span>" : ""}
    </div>
  </div>
  <div class="actions">
    ${
      feedback.isDeleted
        ? `<button class="restore-btn" onclick="restoreFeedback('${feedback._id}')">‚ôªÔ∏è Restore</button>`
        : `
          <button class="edit-btn" onclick="editFeedback('${feedback._id}', '${feedback.rating}', \`${feedback.message || ''}\`)">‚úèÔ∏è Edit</button>
          <button class="delete-btn" onclick="deleteFeedback('${feedback._id}')">üóëÔ∏è Delete</button>
        `
    }
  </div>
`;

        feedbackList.appendChild(listItem);
      });
    } else {
      feedbackList.innerHTML = '<div class="no-feedback">No feedback found.</div>';
    }
  } catch (err) {
    feedbackList.innerHTML = '<div class="no-feedback">Error loading feedback. Please try again.</div>';
  }
});

function closeFeedbackManagement() {
  window.location.href = "/home";
}

async function editFeedback(id, rating, message) {
  const newRating = prompt("Edit your rating (1-5):", rating);
  const newMessage = prompt("Edit your message:", message);

  if (!newRating || isNaN(newRating) || newRating < 1 || newRating > 5) {
    showToast("Rating must be between 1 and 5.");
    return;
  }

  try {
    const res = await fetch(`/api/feedback/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      credentials: "include",
      body: JSON.stringify({ rating: newRating, message: newMessage })
    });

    const data = await res.json();
    if (data.success) {
      showToast("Feedback updated successfully!");
      location.reload();
    } else {
      showToast("Failed to update feedback. Please try again.");
    }
  } catch (err) {
    showToast("Error updating feedback. Please try again.");
  }
}

async function deleteFeedback(id) {
  if (confirm("Are you sure you want to delete this feedback?")) {
    try {
      const res = await fetch(`/api/feedback/${id}`, {
        method: "DELETE",
        credentials: "include"
      });

      const data = await res.json();
      if (data.success) {
        showToast("Feedback deleted successfully!");
        location.reload(); // Soft-deleted item won't reappear
      } else {
        showToast("Failed to delete feedback. Please try again.");
      }
    } catch (err) {
      showToast("Error deleting feedback. Please try again.");
    }
  }
}

async function restoreFeedback(id) {
  try {
    const res = await fetch(`/api/feedback/restore/${id}`, {
      method: "PUT",
      credentials: "include"
    });

    const data = await res.json();
    if (data.success) {
      showToast("Feedback restored successfully!");
      location.reload();
    } else {
      showToast("Failed to restore feedback.");
    }
  } catch (err) {
    showToast("Error restoring feedback.");
  }
}

function showToast(message) {
  const toast = document.createElement("div");
  toast.textContent = message;
  toast.className = "toast-message";
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}
</script>

